import { webRequest } from '../util/request.js';
import { botDevChannelId } from '../config.js'

export const deals = {
    description: 'Gets deals',
    name: 'deals',
    aliases: [ 'sale' ],
    usage: '<store>',
    cooldown: 5,
    permissionRequired: 0,
    reqArgs: false,
    guildOnly: false,
    async execute(client, msg, args) {
        if(!args.length) {
            return msg.channel.send( { embed: {
                title: 'No store selected',
                description: `Please select one of the following stores\n**${Object.keys(dealRequest).join('**, **')}**`,
                color: 0x32a8a8,
            }});
        }
        let url = null;
        try {
            url = dealRequest[args[0]].URL.split('/');
        } catch(err) {
            return msg.channel.send( { embed: {
                title: '❌ **Error**',
                description: `Store ${args[0]} does not exist`,
                color: 0xf52500,
            }}); 
        }
        let response = await getResponse(client, url, args[0]);
        if (!response) {
            return msg.channel.send('❌ **Error** on web request.');
        }
        msg.channel.send({ embed: dealRequest[args[0]].embed(response)});
    },
    async runAll(client) {
        let iterableObject = Object.keys(dealRequest);
        for(let store of iterableObject) {
            let response = await getResponse(client, dealRequest[store].URL.split('/'), store);
            if (!response) {
                return client.channels.cache.get(dealRequest[store].channelId).send('❌ **Error** ❌ Web request error.');
            }
            let channel = client.channels.cache.get(dealRequest[store].channelId);
            if (channel) {
                return channel.send({ embed: dealRequest[store].embed(response)});
            }
            client.channels.cache.get(botDevChannelId).send(`⚠️ **Warning** ⚠️ Store *${store}* does not have a valid channel`);
        }
    },
};

const dealRequest = {
    chrono: {
        channelId: '735608966234636468',
        URL: 'api.chrono.gg/sale',
        method: 'GET',
        embed(response) { return {
            title: '**Chrono.gg Daily Deal**',
            description: `Save ${response.discount} on ${response.name}\nBuy now at ${response.sale_price}${(response.currency === 'USD' ? '$' : response.currency)}`,
            color: 0x38204b,
            fields: [
                {
                    name: 'Steam Store Page',
                    value: response.steam_url,
                },
            ],
            thumbnail: {
                url: 'https://i.imgur.com/IxpuwUg.png'
            },
            image: {
                url: response.promo_image
            }
        }}
    },
    example: {
        URL: 'jsonplaceholder.typicode.com/posts/42',
        method: 'GET',
        embed(response) { return {
            title: '**Example**',
            description: `**Title**\n${response.title}\n**Body**\n${response.body}`,
            color: 0xfffffe,
        }}
    }
};

async function getResponse(client, url, store) {
    let options = {
        host: url.splice(0,1)[0],
        path: '/' + url.join('/'),
        method: dealRequest[store].method
    };
    let response = null;
    try {
        response = await webRequest(options);
        response = JSON.parse(response);
    } catch (err) {
        client.channels.cache.get(botDevChannelId).send(`❌ **Error** ❌ Web request / JSON parsing failed\nDetails:\n${JSON.stringify(err)}`);
    }
    return response;
}
